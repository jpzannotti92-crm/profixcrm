name: Deploy to cPanel (FTP)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi
          npm run build

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none

      - name: Install PHP dependencies
        run: composer install --no-dev --prefer-dist --no-interaction --no-progress

      - name: Prepare env files from secret
        env:
          ENV_FILE: ${{ secrets.ENV_PRODUCTION }}
        run: |
          if [ -n "$ENV_FILE" ]; then
            printf "%s" "$ENV_FILE" > .env.production
            cp .env.production .env
            # Generar env.php como fallback sin dotfiles
            echo "<?php" > env.php
            while IFS= read -r line; do
              # Omitir comentarios y líneas vacías
              if [ -z "${line}" ] || [ "${line#\#}" != "${line}" ]; then continue; fi
              key=$(printf "%s" "$line" | cut -d '=' -f1 | xargs)
              val=$(printf "%s" "$line" | cut -d '=' -f2-)
              # Quitar comillas rodeando el valor
              val=${val%\"}; val=${val#\"}; val=${val%\'}; val=${val#\'}
              printf "$_ENV['%s']='%s'; putenv('%s=%s');\n" "$key" "$val" "$key" "$val" >> env.php
            done < .env.production
            echo "?>" >> env.php
          else
            echo "ENV_PRODUCTION secret is empty or not set" && exit 1
          fi

      - name: Sync frontend dist to public
        run: |
          mkdir -p public/assets
          if [ -f frontend/dist/index.html ]; then cp -f frontend/dist/index.html public/index.html; fi
          if [ -d frontend/dist/assets ]; then rsync -av --delete frontend/dist/assets/ public/assets/; fi

      - name: Create required writable directories
        run: |
          # Crear directorios necesarios para health-deep
          mkdir -p storage storage/logs uploads
          # Añadir archivos vacíos para asegurar su subida por FTP
          touch storage/.keep storage/logs/.keep uploads/.keep

      - name: Verify FTP connection and target directory
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y lftp
          lftp -e "set net:timeout 20; set net:max-retries 2; set ssl:verify-certificate no; pwd; ls; cd ${FTP_DIR}; pwd; ls; bye" -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR: ${{ secrets.FTP_DIR }}

      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          protocol: ${{ secrets.FTP_PROTOCOL }}
          local-dir: ./
          server-dir: ${{ secrets.FTP_DIR }}
          dangerous-clean-slate: false
          exclude: |
            **/.git/**
            **/.github/**
            **/.DS_Store
            frontend/node_modules/**
            frontend/src/**
            deployment_package/**
            **/tests/**
            **/*.md
            **/*.txt
            **/*.log
            **/*.tmp
            **/*.cache
          timeout: 600000

      - name: Upload env files explicitly (lftp)
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y lftp
          lftp -e "set net:timeout 20; set net:max-retries 2; set ssl:verify-certificate no; cd ${FTP_DIR}; put -O . .env; put -O . .env.production; ls -la; bye" -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_DIR: ${{ secrets.FTP_DIR }}

      - name: Post-deploy health check
        run: |
          set -e
          curl -fsSL "$HEALTH_URL" -o /dev/null
          curl -fsSL "$HEALTH_DEEP_URL" -o /dev/null || true
        env:
          HEALTH_URL: https://spin2pay.com/api/health
          HEALTH_DEEP_URL: https://spin2pay.com/api/health-deep