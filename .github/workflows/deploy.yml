name: Deploy to cPanel (FTP)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi
          npm run build

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none

      - name: Install PHP dependencies
        run: composer install --no-dev --prefer-dist --no-interaction --no-progress

      - name: Prepare env files from secret
        env:
          ENV_FILE: ${{ secrets.ENV_PRODUCTION }}
        run: |
          if [ -n "$ENV_FILE" ]; then
            printf "%s" "$ENV_FILE" > .env.production
            cp .env.production .env
            # Generar env.php como fallback sin dotfiles
            echo "<?php" > env.php
            while IFS= read -r line; do
              # Omitir comentarios y líneas vacías
              if [ -z "${line}" ] || [ "${line#\#}" != "${line}" ]; then continue; fi
              key=$(printf "%s" "$line" | cut -d '=' -f1 | xargs)
              val=$(printf "%s" "$line" | cut -d '=' -f2-)
              # Quitar comillas rodeando el valor
              val=${val%\"}; val=${val#\"}; val=${val%\'}; val=${val#\'}
              printf "$_ENV['%s']='%s'; putenv('%s=%s');\n" "$key" "$val" "$key" "$val" >> env.php
            done < .env.production
            echo "?>" >> env.php

            # Re-escribir config/config.php con credenciales de producción (fallback)
            DB_HOST=$(grep -E "^DB_HOST=" .env.production | cut -d '=' -f2- | tr -d "'\"")
            DB_PORT=$(grep -E "^DB_PORT=" .env.production | cut -d '=' -f2- | tr -d "'\"")
            DB_NAME=$(grep -E "^(DB_DATABASE|DB_NAME)=" .env.production | head -n1 | cut -d '=' -f2- | tr -d "'\"")
            DB_USER=$(grep -E "^(DB_USERNAME|DB_USER)=" .env.production | head -n1 | cut -d '=' -f2- | tr -d "'\"")
            DB_PASS=$(grep -E "^(DB_PASSWORD|DB_PASS)=" .env.production | head -n1 | cut -d '=' -f2- | tr -d "'\"")
            mkdir -p config
            cat > config/config.php <<PHP
<?php
return [
    'database' => [
        'host' => '${DB_HOST:-localhost}',
        'port' => '${DB_PORT:-3306}',
        'name' => '${DB_NAME:-profixcrm}',
        'username' => '${DB_USER:-root}',
        'password' => '${DB_PASS:-}',
        'charset' => 'utf8mb4',
        'collation' => 'utf8mb4_unicode_ci'
    ],
    'app' => [
        'name' => 'iaTrade CRM',
        'url' => 'https://spin2pay.com',
        'env' => 'production',
        'debug' => false,
        'timezone' => 'America/Mexico_City'
    ],
    'security' => [
        'key' => 'auto',
        'jwt_secret' => 'auto',
        'session_lifetime' => 120,
        'password_min_length' => 8
    ]
];
require_once __DIR__ . '/constants.php';
?>
PHP
          else
            echo "ENV_PRODUCTION secret is empty or not set" && exit 1
          fi

      - name: Sync frontend dist to public
        run: |
          mkdir -p public/assets
          if [ -f frontend/dist/index.html ]; then cp -f frontend/dist/index.html public/index.html; fi
          if [ -d frontend/dist/assets ]; then rsync -av --delete frontend/dist/assets/ public/assets/; fi

      - name: Create required writable directories
        run: |
          # Crear directorios necesarios para health-deep
          mkdir -p storage storage/logs uploads
          # Añadir archivos vacíos para asegurar su subida por FTP
          touch storage/.keep storage/logs/.keep uploads/.keep

      - name: Verify FTP connection and target directory
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y lftp
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "${FTP_SERVER}:${FTP_PORT}" -e "set net:timeout 30; set net:max-retries 3; set net:reconnect-interval-base 5; set net:reconnect-interval-multiplier 1; set ftp:ssl-allow true; set ftp:ssl-force true; set ftp:passive-mode true; set ftp:ssl-protect-data true; set ssl:verify-certificate no; set cmd:fail-exit no; set cmd:trace true; pwd; ls; cd public_html; pwd; ls; cd public; pwd; ls; bye"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}

      - name: FTP smoke test (upload marker to /public)
        run: |
          set -e
          echo "FTP_OK $(date -u)" > ftp_check_marker.html
          sudo apt-get update -y
          sudo apt-get install -y lftp
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "${FTP_SERVER}:${FTP_PORT}" -e "set net:timeout 30; set net:max-retries 3; set ftp:ssl-allow true; set ftp:ssl-force true; set ftp:passive-mode true; set ftp:ssl-protect-data true; set ssl:verify-certificate no; set cmd:fail-exit no; set cmd:trace true; cd public_html/public; put -O . ftp_check_marker.html; ls -la; bye"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}

      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: ${{ secrets.FTP_PORT }}
          protocol: ${{ secrets.FTP_PROTOCOL }}
          local-dir: ./
          server-dir: public_html
          dangerous-clean-slate: false
          exclude: |
            **/.git/**
            **/.github/**
            **/.DS_Store
            frontend/node_modules/**
            frontend/src/**
            deployment_package/**
            **/tests/**
            **/*.md
            **/*.txt
            **/*.log
            **/*.tmp
            **/*.cache
          timeout: 600000

      - name: Upload env and config (to public_html)
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y lftp
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "${FTP_SERVER}:${FTP_PORT}" -e "set net:timeout 30; set net:max-retries 3; set ftp:ssl-allow true; set ftp:ssl-force true; set ftp:passive-mode true; set ftp:ssl-protect-data true; set ssl:verify-certificate no; set cmd:trace true; cd public_html; put -O . .env; put -O . .env.production; put -O . env.php; mkdir -f config; put -O config config/config.php; ls -la; bye"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}

      - name: Upload frontend index and assets explicitly to /public
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y lftp rsync
          # Asegurar que public/index.html y assets existen localmente
          if [ -f frontend/dist/index.html ]; then cp -f frontend/dist/index.html public/index.html; fi
          if [ -d frontend/dist/assets ]; then rsync -av --delete frontend/dist/assets/ public/assets/; fi
          # Subir explícitamente al docroot /public
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "${FTP_SERVER}:${FTP_PORT}" -e "set net:timeout 30; set net:max-retries 3; set ftp:ssl-allow true; set ftp:ssl-force true; set ftp:passive-mode true; set ftp:ssl-protect-data true; set ssl:verify-certificate no; set cmd:trace true; cd public_html/public; mkdir -f assets; put -O . public/index.html; mirror -R --verbose --delete public/assets assets; ls -la; bye"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}

      - name: Force upload assets with mput (fallback)
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y lftp
          # Subida por lotes de archivos en assets como fallback
          lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "${FTP_SERVER}:${FTP_PORT}" -e "set net:timeout 30; set net:max-retries 3; set ftp:ssl-allow true; set ftp:ssl-force true; set ftp:passive-mode true; set ftp:ssl-protect-data true; set ssl:verify-certificate no; set cmd:trace true; cd public_html/public/assets; mput -E -O . public/assets/*; ls -la; bye"
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_PORT: ${{ secrets.FTP_PORT }}

      - name: Post-deploy health check
        run: |
          set -e
          curl -fsSL "$HEALTH_URL" -o /dev/null
          curl -fsSL "$HEALTH_DEEP_URL" -o /dev/null || true
        env:
          HEALTH_URL: https://spin2pay.com/api/health
          HEALTH_DEEP_URL: https://spin2pay.com/api/health-deep